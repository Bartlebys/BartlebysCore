//
//  KeyedChanges.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for Benoit Pereira da Silva https://pereira-da-silva.com/contact
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  https://bartlebys.org  All rights reserved.
//

import Foundation

// MARK: Bartleby's Core: used to keep track of changes in memory when inspecting an App (Value Object)
open class KeyedChanges:ManagedModel{

    public typealias CollectedType = KeyedChanges

	//the elapsed time since the app has been launched
	@objc dynamic open var elapsed:Double = getElapsedTime()

	//the key
	@objc dynamic open var key:String = Default.NO_KEY

	//A description of the changes that have occured
	@objc dynamic open var changes:String = Default.NO_MESSAGE


    // MARK: - Codable


    public enum KeyedChangesCodingKeys: String,CodingKey{
		case elapsed
		case key
		case changes
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: KeyedChangesCodingKeys.self)
			self.elapsed = try values.decode(Double.self,forKey:.elapsed)
			self.key = try values.decode(String.self,forKey:.key)
			self.changes = try values.decode(String.self,forKey:.changes)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: KeyedChangesCodingKeys.self)
		try container.encode(self.elapsed,forKey:.elapsed)
		try container.encode(self.key,forKey:.key)
		try container.encode(self.changes,forKey:.changes)
    }



    // MARK: - Initializable

    required public init() {
        super.init()
    }

    // MARK: - UniversalType

    override  open class var typeName:String{
        return "KeyedChanges"
    }

    override  open class var collectionName:String{
        return "keyedChanges"
    }

    override  open var d_collectionName:String{
        return KeyedChanges.collectionName
    }
}
