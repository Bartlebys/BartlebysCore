//
//  ManagedModel.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for Benoit Pereira da Silva https://pereira-da-silva.com/contact
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  https://bartlebys.org  All rights reserved.
//

import Foundation

// MARK: Bartleby's Core base Managed Entity is Codable and Collectible but not Tolerent (CollectionOf requires the collected type to be tolerent)
open class ManagedModel:Model{

    public typealias CollectedType = ManagedModel

	//An external unique identifier
	@objc dynamic open var externalID:String? {
	    didSet { 
	       if !self.wantsQuietChanges && externalID != oldValue {
	            self.provisionChanges(forKey: "externalID",oldValue: oldValue,newValue: externalID) 
	       } 
	    }
	}

	//A human readable model summary. If you want to disclose more information you can adopt the Descriptible protocol.
	@objc dynamic open var summary:String? {
	    didSet { 
	       if !self.wantsQuietChanges && summary != oldValue {
	            self.provisionChanges(forKey: "summary",oldValue: oldValue,newValue: summary) 
	       } 
	    }
	}

	//An instance Marked ephemeral will be destroyed server side on next ephemeral cleaning procedure.This flag allows for example to remove entities that have been for example created by unit-tests.
	@objc dynamic open var ephemeral:Bool = false

	//MARK: - ChangesInspectable Protocol
	@objc dynamic open var changedKeys:[KeyedChanges] = [KeyedChanges]()

	////Auto commit availability -> Check ManagedModel + ProvisionChanges for detailed explanantions
	@objc dynamic internal var _autoCommitIsEnabled:Bool = true

	//The internal commit provisioning counter to discriminate Creation from Update and for possible frequency analysis
	@objc dynamic open var commitCounter:Int = 0


    // MARK: - Codable


    public enum ManagedModelCodingKeys: String,CodingKey{
		case externalID
		case summary
		case ephemeral
		case changedKeys
		case _autoCommitIsEnabled
		case commitCounter
		case typeName
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: ManagedModelCodingKeys.self)
			self.externalID = try values.decodeIfPresent(String.self,forKey:.externalID)
			self.summary = try values.decodeIfPresent(String.self,forKey:.summary)
			self.ephemeral = try values.decode(Bool.self,forKey:.ephemeral)
			self.commitCounter = try values.decode(Int.self,forKey:.commitCounter)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: ManagedModelCodingKeys.self)
		try container.encodeIfPresent(self.externalID,forKey:.externalID)
		try container.encodeIfPresent(self.summary,forKey:.summary)
		try container.encode(self.ephemeral,forKey:.ephemeral)
		try container.encode(self.commitCounter,forKey:.commitCounter)
    }



    // MARK: - Initializable

    required public init() {
        super.init()
    }

    // MARK: - UniversalType

    override  open class var typeName:String{
        return "ManagedModel"
    }

    override  open class var collectionName:String{
        return "managedModels"
    }

    override  open var d_collectionName:String{
        return ManagedModel.collectionName
    }
}
