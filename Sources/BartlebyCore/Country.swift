//
//  Country.swift
//  LaPlayList
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for Benoit Pereira da Silva https://pereira-da-silva.com/contact 
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  MusicWork https://music-work.com  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	#endif

// MARK: Country
public class Country:ManagedModel{

	@objc dynamic open var abbreviation:String = ""

	@objc dynamic open var name:String = ""

	@objc dynamic open var remoteUpdateDate:Int = 0


    // MARK: - Codable


    public enum CountryCodingKeys: String,CodingKey{
		case abbreviation
		case name
		case remoteUpdateDate
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: CountryCodingKeys.self)
			self.abbreviation = try values.decode(String.self,forKey:.abbreviation)
			self.name = try values.decode(String.self,forKey:.name)
			self.remoteUpdateDate = try values.decode(Int.self,forKey:.remoteUpdateDate)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: CountryCodingKeys.self)
		try container.encode(self.abbreviation,forKey:.abbreviation)
		try container.encode(self.name,forKey:.name)
		try container.encode(self.remoteUpdateDate,forKey:.remoteUpdateDate)
    }


    // MARK: - Initializable

    required public init() {
        super.init()
    }

    // MARK: - UniversalType

    override  open class var typeName:String{
        return "Country"
    }

    override  open class var collectionName:String{
        return "countries"
    }

    override  open var d_collectionName:String{
        return Country.collectionName
    }
}
